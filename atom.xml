<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MOFASHY</title>
  
  <subtitle>Live Is Life</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-07-10T07:34:54.963Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Mofashy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>终端美化之 Windows 篇</title>
    <link href="http://example.com/2024/07/09/terminal-beautify-win/"/>
    <id>http://example.com/2024/07/09/terminal-beautify-win/</id>
    <published>2024-07-09T13:54:49.000Z</published>
    <updated>2024-07-10T07:34:54.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-Windows-Terminal"><a href="#安装-Windows-Terminal" class="headerlink" title="安装 Windows Terminal"></a>安装 Windows Terminal</h2><p>Windows 终端程序是一款新式、快速、高效、强大且高效的终端应用程序，适用于命令行工具和命令提示符，PowerShell 和 WSL 等 Shell 用户。可以通过配置美化样式。打开 Windows 应用商城，安装 <a href="https://www.microsoft.com/store/productId/9N0DX20HK701?ocid=pdpshare">Windows Terminal</a>。</p><span id="more"></span><h2 id="安装-oh-my-posh"><a href="#安装-oh-my-posh" class="headerlink" title="安装 oh-my-posh"></a>安装 oh-my-posh</h2><p> <a href="https://apps.microsoft.com/store/detail/XP8K0HKJFRXGCK?ocid=pdpshare">oh-my-posh</a> 是一个让你的命令行提示更美观的工具。oh-my-posh 广泛支持Windows、macOS、Linux等平台。安装好 oh-my-posh 后，会在安装目录下找到下面的文件和目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件目录结构和官网描述有些出入</span></span><br><span class="line">.</span><br><span class="line">└─oh-my-posh</span><br><span class="line">  ├─bin</span><br><span class="line">  │ └─oh-my-posh.exe</span><br><span class="line">  └─themes</span><br><span class="line">    └─M365Princess.omp.json</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- `oh-my-posh` - Windows可执行文件或目录</span><br><span class="line">- `themes` - 主题目录</span><br><span class="line"></span><br><span class="line">## 安装主题</span><br><span class="line"></span><br><span class="line">下载 oh-my-posh 主题，下载成功后的主题文件位于：`C:\Users\&lt;your_name&gt;\AppData\Local\Programs\oh-my-posh\themes`。</span><br><span class="line"></span><br><span class="line">```powershell</span><br><span class="line">Get-PoshThemes</span><br></pre></td></tr></table></figure><p>创建&#x2F;编辑PowerShell配置文件指定主题。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">notepad <span class="variable">$PROFILE</span></span><br><span class="line"><span class="comment"># 当上述命令出现错误时，请确保先创建配置文件</span></span><br><span class="line"><span class="built_in">New-Item</span> <span class="literal">-Path</span> <span class="variable">$PROFILE</span> <span class="literal">-Type</span> File <span class="literal">-Force</span></span><br></pre></td></tr></table></figure><p>在打开的文件中添加如下内容：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置你喜欢的主题，如：M365Princess.omp.json</span></span><br><span class="line"><span class="built_in">oh</span><span class="literal">-my-posh</span> init pwsh <span class="literal">--config</span> <span class="string">&#x27;C:/Users/Posh/M365Princess.omp.json&#x27;</span> | <span class="built_in">Invoke-Expression</span></span><br></pre></td></tr></table></figure><h2 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h2><p>oh-my-posh 这设计为使用 Nerd 字体，为了图标的正常显示，还需要安装 Nerd 字体，并配置终端以使用它。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">oh</span><span class="literal">-my-posh</span> font install</span><br><span class="line"><span class="comment"># 根据提示先择喜欢的 Nerd 字体，博主选择的是 Meslo 字体</span></span><br></pre></td></tr></table></figure><p>安装好 Nerd 字体后，修改 Windows 终端设置（默认快捷方式：<code>CTRL + SHIFT + ,</code>）。在<code>settings.json</code>文件中设置默认字体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;defaults&quot;</span><span class="punctuation">:</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;font&quot;</span><span class="punctuation">:</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;face&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MesloLGM Nerd Font&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>使用 Visual Studio Code 时，还需要配置集成终端以使用 Nerd 字体。这可以通过更改终端设置中的值来完成（默认快捷方式：<code>CTRL + ,</code>）。选择<code>Users</code>，搜索<code>Integrated: Font Family</code>。</p><p>如果使用的是基于 JSON 的设置，则需要更新该值。书字体的例子：<code>terminal.integrated.fontFamilyMesloLGM Nerd Font</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;terminal.integrated.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MesloLGM Nerd Font&quot;</span></span><br></pre></td></tr></table></figure><h2 id="显示文件和文件夹图标"><a href="#显示文件和文件夹图标" class="headerlink" title="显示文件和文件夹图标"></a>显示文件和文件夹图标</h2><p><a href="https://github.com/devblackops/Terminal-Icons">Terminal-Icons</a> 是一个 PowerShell 模块，它会添加在 Windows 终端中显示文件或文件夹时可能缺少的文件和文件夹图标，并基于名称或扩展名查找相应的图标。 它尝试将图标用于已知文件&#x2F;文件夹，但如果找不到此内容，则会回滚到通用文件或文件夹图标。</p><p>若要使用 PowerShell 安装 Terminal-Icons，请使用以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> Terminal<span class="literal">-Icons</span> <span class="literal">-Repository</span> PSGallery</span><br></pre></td></tr></table></figure><p>编辑<code>$profile</code>，添加以下内容：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> <span class="literal">-Name</span> Terminal<span class="literal">-Icons</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装-Windows-Terminal&quot;&gt;&lt;a href=&quot;#安装-Windows-Terminal&quot; class=&quot;headerlink&quot; title=&quot;安装 Windows Terminal&quot;&gt;&lt;/a&gt;安装 Windows Terminal&lt;/h2&gt;&lt;p&gt;Windows 终端程序是一款新式、快速、高效、强大且高效的终端应用程序，适用于命令行工具和命令提示符，PowerShell 和 WSL 等 Shell 用户。可以通过配置美化样式。打开 Windows 应用商城，安装 &lt;a href=&quot;https://www.microsoft.com/store/productId/9N0DX20HK701?ocid=pdpshare&quot;&gt;Windows Terminal&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="终端美化" scheme="http://example.com/tags/%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>终端美化之 Mac 篇</title>
    <link href="http://example.com/2024/06/09/terminal-beautify-mac/"/>
    <id>http://example.com/2024/06/09/terminal-beautify-mac/</id>
    <published>2024-06-09T10:03:09.000Z</published>
    <updated>2024-07-10T07:34:54.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装iTerm2"><a href="#安装iTerm2" class="headerlink" title="安装iTerm2"></a>安装iTerm2</h2><p><a href="https://iterm2.com/">iTerm2</a> 是一个比 Mac 默认的终端更优雅的终端模拟器。直接在官网下载安装即可。</p><h2 id="安装Oh-My-Posh"><a href="#安装Oh-My-Posh" class="headerlink" title="安装Oh My Posh"></a>安装Oh My Posh</h2><p><a href="https://ohmyposh.dev/">oh-my-posh</a> 是一个与 <a href="https://ohmyz.sh/">oh-my-zsh</a> 相似，用于让你的命令行提示更美观的工具。oh-my-posh 广泛支持Windows、macOS、Linux等平台。</p><span id="more"></span><p>官方建议使用brew安装，但受限于网络原因，以及安装过程中还需要下载Rust进行编译，因此博主选择了手动下载对应平台的<a href="https://github.com/JanDeDobbeleer/oh-my-posh/releases">二进制文件</a>进行安装。</p><p>打开终端，新建一个用于存放Oh My Posh文件的目录，命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个默认隐藏的目录，其中的“.”，表示该文件或目录默认隐藏</span></span><br><span class="line"><span class="comment"># 如果不想隐藏该目录，可以使用“mkdir opt”替代</span></span><br><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ <span class="built_in">mkdir</span> opt</span><br><span class="line"><span class="comment"># 新建存放Oh My Posh工具的目录</span></span><br><span class="line">$ <span class="built_in">mkdir</span> oh-my-posh</span><br><span class="line">$ <span class="built_in">cd</span> oh-my-posh</span><br><span class="line"><span class="comment"># 新建存放Oh My Posh工具主题的目录</span></span><br><span class="line">$ <span class="built_in">mkdir</span> themes</span><br></pre></td></tr></table></figure><p>将下载的二进制包移动到上面创建好的目录下，命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mv</span> ~/Downloads/posh-darwin-amd64 ~/opt/oh-my-posh/</span><br><span class="line">$ <span class="built_in">cd</span> ~/opt/oh-my-posh</span><br><span class="line"><span class="comment"># 给下载的二进制文件添加可执行权限</span></span><br><span class="line">$ <span class="built_in">chmod</span> +x oh-my-posh</span><br></pre></td></tr></table></figure><p>挑选喜欢的主题并下载，然后将下载好的JSON文件移动到上面创建好的主题目录下，命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mv</span> ~/Downloads/M365Princess.omp.json ~/opt/oh-my-posh/themes/</span><br></pre></td></tr></table></figure><p>编辑<code>.zshrc</code>文件，如果用的是<code>bash</code>，则编辑<code>.bash_profile</code>，命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>在vim插入模式下，在末尾插入如下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(oh-my-posh init zsh --config ~/opt/oh-my-posh/themes/M365Princess.omp.json)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>重新打开一个终端窗口或输入如下命令使之生效。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 完整目录结构：</span></span><br><span class="line">.</span><br><span class="line">└─oh-my-posh</span><br><span class="line">  ├─posh-darwin-amd64</span><br><span class="line">  └─themes</span><br><span class="line">    └─M365Princess.omp.json</span><br></pre></td></tr></table></figure><p>此时的终端看到的是乱码的主题，这是因为缺乏所需的 <a href="https://www.nerdfonts.com/">Nerd Font</a>，所以接下来需要安装 <a href="https://www.nerdfonts.com/">Nerd Font</a>，博主安装的是官方推荐的 <a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/Meslo.zip">Meslo LGM NF</a> 字体，如果选择使用的主题有字体限制，请安装对应的字体，命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ oh-my-posh font install</span><br></pre></td></tr></table></figure><h2 id="安装zsh插件"><a href="#安装zsh插件" class="headerlink" title="安装zsh插件"></a>安装zsh插件</h2><p>网上很多教程都是先安装<code>oh-my-zsh</code>，然后使用<code>oh-my-zsh</code>的插件管理安装插件。博主使用的是<code>oh-my-posh</code>，所以需要手动安装<code>zsh</code>插件。</p><p>Mac 从10.15开始默认的 shell 改成了zsh，如果是以前的系统版本则需要把默认的 shell 改成 zsh。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chsh -s $(<span class="built_in">which</span> zsh)</span><br></pre></td></tr></table></figure><p><code>zsh</code>拥有许多插件，博主根据自己的情况选择安装如下两个插件：</p><ul><li><p><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggesstions</a></p></li><li><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting/tree/master">zsh-syntax-highlighting</a></p></li></ul><h3 id="zsh-autosuggesstions"><a href="#zsh-autosuggesstions" class="headerlink" title="zsh-autosuggesstions"></a>zsh-autosuggesstions</h3><p>当输入命令时，<code>zsh-autosuggesstions</code>插件会基于之前执行过的历史命令自动给出提示，是一个非常好用的插件。</p><p>安装命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>安装好后，添加如下内容到<code>.zshrc</code>以激活插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;source <span class="variable">$&#123;(q-)PWD&#125;</span>/zsh-autosuggestions/zsh-autosuggestions.zsh&quot;</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zshrc</span><br></pre></td></tr></table></figure><h3 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h3><p>在输入命令时，<code>zsh-syntax-highlighting</code>插件会对关键字进行高亮，可以让你输入的命令更加直观，同时如果输入错误的命令，也会显示为红色。</p><p>安装命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>安装好后，添加如下内容到<code>.zshrc</code>以激活插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;source <span class="variable">$&#123;(q-)PWD&#125;</span>/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot;</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zshrc</span><br></pre></td></tr></table></figure><h3 id="更优雅的ls"><a href="#更优雅的ls" class="headerlink" title="更优雅的ls"></a>更优雅的ls</h3><p><a href="https://github.com/lsd-rs/lsd">lsd</a> 是对 GNU <code>ls</code>命令的重写，具有列标题、各种项目的颜色、字体和图标支持等附加功能。</p><p>安装命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install lsd</span><br></pre></td></tr></table></figure><p>编辑<code>.zshrc</code>或’.bash_profile’，将默认的<code>ls</code>命令绑定到<code>lsd</code>，大家也可以绑定自己喜欢的别名。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;alias ls=&#x27;lsd -l&#x27;&quot;</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zshrc</span><br></pre></td></tr></table></figure><h2 id="VS-Code配置"><a href="#VS-Code配置" class="headerlink" title="VS Code配置"></a>VS Code配置</h2><p>如果你使用 <a href="https://code.visualstudio.com/">VS Code</a> 代码编辑器，那么你将需要配置<code>Nerd Font</code>以便更好的使用内置的终端程序。打开VS Code设置（默认快捷键：<code>⌘+,</code>，然后搜索<code>Integrated: Font Family</code>。</p><p>你也可以打开VS Code设置的JSON模式进行修改，只需要更新<code>terminal.integrated.fontFamily</code>的值即可。以<code>MesloLGM Nerd Font</code>为例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;terminal.integrated.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MesloLGM Nerd Font&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装iTerm2&quot;&gt;&lt;a href=&quot;#安装iTerm2&quot; class=&quot;headerlink&quot; title=&quot;安装iTerm2&quot;&gt;&lt;/a&gt;安装iTerm2&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm2&lt;/a&gt; 是一个比 Mac 默认的终端更优雅的终端模拟器。直接在官网下载安装即可。&lt;/p&gt;
&lt;h2 id=&quot;安装Oh-My-Posh&quot;&gt;&lt;a href=&quot;#安装Oh-My-Posh&quot; class=&quot;headerlink&quot; title=&quot;安装Oh My Posh&quot;&gt;&lt;/a&gt;安装Oh My Posh&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://ohmyposh.dev/&quot;&gt;oh-my-posh&lt;/a&gt; 是一个与 &lt;a href=&quot;https://ohmyz.sh/&quot;&gt;oh-my-zsh&lt;/a&gt; 相似，用于让你的命令行提示更美观的工具。oh-my-posh 广泛支持Windows、macOS、Linux等平台。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="终端美化" scheme="http://example.com/tags/%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>基于 hexo 框架的个人博客搭建</title>
    <link href="http://example.com/2024/06/04/blog-power-by-hexo/"/>
    <id>http://example.com/2024/06/04/blog-power-by-hexo/</id>
    <published>2024-06-04T23:42:11.000Z</published>
    <updated>2024-07-10T07:34:54.955Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架，配合 <a href="https://docs.github.com/zh/pages/getting-started-with-github-pages">GitHub Pages</a>，可以方便、快捷的创建个人博客。</p><h2 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h2><p>使用 hexo 搭建博客之前需要准备的工具：</p><ul><li><a href="https://git-scm.com/">git</a></li><li><a href="https://nodejs.org/">Node.js</a></li></ul><span id="more"></span><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><p>安装 hexo ，在终端中输入命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>新建一个专门用于存放 hexo 博客文件的目录（如：<code>hexo</code>），然后在这个目录下右键通过终端打开，接下来初始化<code>hexo</code>，命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 hexo 目录</span></span><br><span class="line"><span class="built_in">cd</span> hexo</span><br><span class="line"><span class="comment"># hexo init 博客名（英文）</span></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 启动服务预览博客</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>创建完成后，指定目录下生成的关键文件目录结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├─...</span><br><span class="line">├─node_modules<span class="punctuation">:</span> # node 存放依赖包</span><br><span class="line">├─public<span class="punctuation">:</span> # 存放 hexo 生成的网页文件</span><br><span class="line">├─scaffolds<span class="punctuation">:</span> # 脚手架目录，存放生成文章的模板</span><br><span class="line">├─source<span class="punctuation">:</span> # 存放 MARKDOWN 文章</span><br><span class="line">├─themes<span class="punctuation">:</span> # 存放主题</span><br><span class="line">└─_config.yml<span class="punctuation">:</span> # 配置文件</span><br></pre></td></tr></table></figure><h2 id="配置第三方主题"><a href="#配置第三方主题" class="headerlink" title="配置第三方主题"></a>配置第三方主题</h2><p>hexo 拥有非常丰富的第三方主题，可以根据个人喜好挑选。除了可以从官网罗列的四百多款主题中挑选，还可以在 <a href="https://www.github.com/">GitHub</a> 上搜索未在官网上罗列的主题。博主比较喜欢简洁的主题，所以用的是一款偏小众的主题—— <a href="https://github.com/CodeDaraW/Hacker">Hacker</a>，命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 themes 目录</span></span><br><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line"><span class="comment"># 使用 git 克隆主题</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/CodeDaraW/Hacker.git hacker</span><br><span class="line"><span class="comment"># 删除 git 信息，否则后续会被当成子模块添加到 git</span></span><br><span class="line"><span class="built_in">rm</span> -rf .git</span><br></pre></td></tr></table></figure><p>编辑<code>_config.yml</code>文件，把 hexo 默认主题改成上面下载好的主题：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- theme: landscape</span></span><br><span class="line"><span class="addition">+ theme: hacker</span></span><br></pre></td></tr></table></figure><h2 id="部署到-GitHub-Pages"><a href="#部署到-GitHub-Pages" class="headerlink" title="部署到 GitHub Pages"></a>部署到 GitHub Pages</h2><p>为了更好的管理 hexo 源文件和生成的静态网页文件，需要用到两个仓库，然后通过 <a href="https://docs.github.com/zh/actions">GitHub Actions</a> 上传整个博客源文件到私有仓库（下面用<code>blog_repo</code>代替）并自动部署到 GitHub Pages 所在的公开仓库（下面用<code>username.github.io</code>代替）。</p><h3 id="配置-SSH-Deploy-Key"><a href="#配置-SSH-Deploy-Key" class="headerlink" title="配置 SSH Deploy Key"></a>配置 SSH Deploy Key</h3><p>为了跨仓库部署，需要用到 SSH deploy key 或者 personal access token（这里用 deploy key演示）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -m pem -b 4096 -C <span class="string">&quot;youremailhere@example.com&quot;</span> -N <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>在公开库<code>username.github.io</code>中前往<code>Settings</code> &gt; <code>Deploy keys</code>，将公钥内容贴到 Deploy keys 里。</p><p>在私有库<code>blog_repo</code>中前往<code>Settings</code> &gt; <code>Secrets and variables</code> &gt; <code>Actions</code> &gt; <code>Secrets</code>，将私钥内容贴到 Repository secrets 里。</p><h3 id="配置-Actions"><a href="#配置-Actions" class="headerlink" title="配置 Actions"></a>配置 Actions</h3><p>查看你电脑上的 Node.js 版本并记下（如：22.x.y）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure><p>在私有库<code>blog_repo</code>中前往 <code>Settings</code> &gt; <code>Pages</code> &gt; <code>Source</code> 。 将 source 更改为 GitHub Actions，然后保存。</p><p>在私有库<code>blog_repo</code>中建立<code>.github/workflows/pages.yml</code>，并填入以下内容 (将 22 替换为上个步骤中记下的版本)：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># default branch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">22</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;22&quot;</span> <span class="comment"># 填写对应的 node 版本</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-npm-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">external_repository:</span> <span class="string">username/external-repository</span> <span class="comment"># /username/username.github.io</span></span><br><span class="line">          <span class="attr">publish_branch:</span> <span class="string">your-branch</span>  <span class="comment"># 默认: gh-pages</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><h3 id="推送-blog-repo"><a href="#推送-blog-repo" class="headerlink" title="推送 blog_repo"></a>推送 blog_repo</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"><span class="comment"># 初始化 git</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 查看本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># GitHub 最新默认主分支改成了 main</span></span><br><span class="line"><span class="comment"># 如果本地分支不是 main，需要重命名为 main</span></span><br><span class="line">git branch -m master main</span><br><span class="line"><span class="comment"># 添加远程仓库地址（私有仓库 blog_repo）</span></span><br><span class="line">git remote add origin &lt;blog_repo_url&gt;</span><br><span class="line"><span class="comment"># 同步远程仓库</span></span><br><span class="line">git pull origin main --allow-unrelated-histories</span><br><span class="line"><span class="comment"># 推送到远程仓库，成功后会自动触发 Actions</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>部署完成后，前往 username.github.io 查看网页。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;Hexo&lt;/a&gt; 是一个快速、简洁且高效的博客框架，配合 &lt;a href=&quot;https://docs.github.com/zh/pages/getting-started-with-github-pages&quot;&gt;GitHub Pages&lt;/a&gt;，可以方便、快捷的创建个人博客。&lt;/p&gt;
&lt;h2 id=&quot;提前准备&quot;&gt;&lt;a href=&quot;#提前准备&quot; class=&quot;headerlink&quot; title=&quot;提前准备&quot;&gt;&lt;/a&gt;提前准备&lt;/h2&gt;&lt;p&gt;使用 hexo 搭建博客之前需要准备的工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="hexo博客" scheme="http://example.com/tags/hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Vue3/Vite 创建 uni-app 工程及相关配置</title>
    <link href="http://example.com/2024/01/10/vue3-vite-vscode-uniapp/"/>
    <id>http://example.com/2024/01/10/vue3-vite-vscode-uniapp/</id>
    <published>2024-01-10T23:36:18.000Z</published>
    <updated>2024-07-10T07:34:54.967Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>uni-app</code>是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序等多个平台。</p></blockquote><span id="more"></span><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="创建以-Javascript-开发的工程"><a href="#创建以-Javascript-开发的工程" class="headerlink" title="创建以 Javascript 开发的工程"></a>创建以 Javascript 开发的工程</h3><ul><li>使用正式版</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx degit dcloudio/uni-preset-vue<span class="comment">#vite my-vue3-project</span></span><br></pre></td></tr></table></figure><ul><li>使用开发版</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx degit dcloudio/uni-preset-vue<span class="comment">#vite-alpha my-vue3-project</span></span><br></pre></td></tr></table></figure><h3 id="创建以Typescript-开发的工程"><a href="#创建以Typescript-开发的工程" class="headerlink" title="创建以Typescript 开发的工程"></a>创建以Typescript 开发的工程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx degit dcloudio/uni-preset-vue<span class="comment">#vite-ts my-vue3-project</span></span><br></pre></td></tr></table></figure><h3 id="添加-sass-预处理器"><a href="#添加-sass-预处理器" class="headerlink" title="添加 sass 预处理器"></a>添加 sass 预处理器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add sass -D</span><br></pre></td></tr></table></figure><h2 id="配置-eslint"><a href="#配置-eslint" class="headerlink" title="配置 eslint"></a>配置 eslint</h2><h3 id="安装-ESLint"><a href="#安装-ESLint" class="headerlink" title="安装 ESLint"></a>安装 ESLint</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add eslint -D</span><br></pre></td></tr></table></figure><h3 id="初始化-ESLint-配置"><a href="#初始化-ESLint-配置" class="headerlink" title="初始化 ESLint 配置"></a>初始化 ESLint 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm create @eslint/config</span><br></pre></td></tr></table></figure><p>使用 ESLint 做什么，我选择第三个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? How would you like to use ESLint? ...</span><br><span class="line">  To check syntax only  // 仅检查语法</span><br><span class="line">  To check syntax and find problems  // 检查语法并发现问题</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">To check syntax, find problems, and enforce code style // 检查语法、发现问题并强制执行代码样式</span></span><br></pre></td></tr></table></figure><p>在哪种项目模块规范中使用，我选择第一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? What type of modules does your project use? ...</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">JavaScript modules (import/export)</span></span><br><span class="line">  CommonJS (require/exports)</span><br><span class="line">  None of these</span><br></pre></td></tr></table></figure><p>在哪个框架中使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? Which framework does your project use? ...</span><br><span class="line">  React</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Vue.js</span></span><br><span class="line">  None of these</span><br></pre></td></tr></table></figure><p>是否使用 Typescript 和代码在哪里运行，我选择了使用 Typescript 和两个环境都选择</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">√ Does your project use TypeScript? · No / **Yes**</span><br><span class="line">√ Where does your code run? · browser, node</span><br></pre></td></tr></table></figure><p>希望如何定义项目的样式，这里看实际需要，因为后面还要配置 Prettier，我选择了第二个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">√ How would you like to define a style for your project? …</span><br><span class="line">  Use a popular style guide</span><br><span class="line">❯ Answer questions about your style</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># next</span></span></span><br><span class="line">√ How would you like to define a style for your project? · prompt</span><br></pre></td></tr></table></figure><p>想用什么格式的配置文件，我选了 Javascript</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? What format do you want your config file to be in? ...</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">JavaScript</span></span><br><span class="line">  YAML</span><br><span class="line">  JSON</span><br></pre></td></tr></table></figure><p>选择缩进风格，看实际需要，我选择了 Tabs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? What style of indentation do you use? ...</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Tabs</span></span><br><span class="line">  Spaces</span><br></pre></td></tr></table></figure><p>字符串使用双引号还是单引号，看实际需要，我选了单引号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? What quotes do you use for strings? ...</span><br><span class="line">  Double</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Single</span></span><br></pre></td></tr></table></figure><p>使用哪种结束符，Windows 是 CRLF，Unix 是 LF，<em>我这里选择了默认，因为后面在<code>.eslintrc.js</code>改成了不限制，即在 类 Unix 平台和 Windows 平台都不做警示</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? What line endings do you use? ...</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Unix</span></span><br><span class="line">  Windows</span><br></pre></td></tr></table></figure><p>是否使用分号，我选择了 No</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Do you require semicolons? » No / Yes</span><br></pre></td></tr></table></figure><p>接下来会提示需要安装哪些依赖，以及是否立即安装，我选择了 Yes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@typescript-eslint/eslint-plugin@latest eslint-plugin-vue@latest @typescript-eslint/parser@latest</span><br><span class="line">? Would you like to install them now? » No / Yes</span><br></pre></td></tr></table></figure><p>选择包管理工具，看实际需要，我这里选择了 pnpm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? Which package manager do you want to use? ...</span><br><span class="line">  npm</span><br><span class="line">  yarn</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">pnpm</span> </span><br></pre></td></tr></table></figure><p>随后安装完依赖就会在项目的跟目录下生成<code>.eslintrc.js</code>文件，根据提示，我把后缀改成了<code>.cjs</code>，并且 eslint 已经生效了（如果不生效，建议重启 VS Code）</p><p>根据实际需要，可以新增一个 ESLint 的忽略文件<code>.eslintignore</code>，并根据实际需要配置需要忽略的目录或文件</p><h3 id="VSCode-添加-ESLint-插件"><a href="#VSCode-添加-ESLint-插件" class="headerlink" title="VSCode 添加 ESLint 插件"></a>VSCode 添加 ESLint 插件</h3><img src="1704950918532.png"><h3 id="VSCode-全局配置"><a href="#VSCode-全局配置" class="headerlink" title="VSCode 全局配置"></a>VSCode 全局配置</h3><p>关闭默认的保存并格式，开启自动格式化修复</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="配置-Prettier"><a href="#配置-Prettier" class="headerlink" title="配置 Prettier"></a>配置 Prettier</h2><h3 id="安装-Prettier"><a href="#安装-Prettier" class="headerlink" title="安装 Prettier"></a>安装 Prettier</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add prettier -D</span><br></pre></td></tr></table></figure><h3 id="安装-ESLint-与-Prettier-结合使用的依赖"><a href="#安装-ESLint-与-Prettier-结合使用的依赖" class="headerlink" title="安装 ESLint 与 Prettier 结合使用的依赖"></a>安装 ESLint 与 Prettier 结合使用的依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i eslint-config-prettier eslint-plugin-prettier -D</span><br></pre></td></tr></table></figure><h3 id="配置-Prettier-1"><a href="#配置-Prettier-1" class="headerlink" title="配置 Prettier"></a>配置 Prettier</h3><p>根据实际需要在根目录下添加<code>.prettierrc.js</code>或<code>.prettierrc.cjs</code>，并进行相关配置，我这里只是几个规则，就配置在<code>.eslintrc.cjs</code>里了，如下所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .exlintrc.cjs</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// ... 省略 ...</span></span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;prettier/prettier&#x27;</span>: [</span><br><span class="line">      <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">singleQuote</span>: <span class="literal">true</span>, <span class="comment">// 单引号</span></span><br><span class="line">        <span class="attr">semi</span>: <span class="literal">false</span>, <span class="comment">// 无分号</span></span><br><span class="line">        <span class="attr">printWidth</span>: <span class="number">80</span>, <span class="comment">// 每行宽度至多80字符</span></span><br><span class="line">        <span class="attr">trailingComma</span>: <span class="string">&#x27;none&#x27;</span>, <span class="comment">// 不加对象|数组最后逗号</span></span><br><span class="line">        <span class="attr">endOfLine</span>: <span class="string">&#x27;auto&#x27;</span> <span class="comment">// 换行结束不限制（win mac 不一致）</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;vue/multi-word-component-names&#x27;</span>: [</span><br><span class="line">      <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">ignores</span>: [<span class="string">&#x27;index&#x27;</span>] <span class="comment">// vue组件名称多单词组成（忽略index.vue）</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;vue/no-setup-props-destructure&#x27;</span>: [<span class="string">&#x27;off&#x27;</span>] <span class="comment">// 关闭 props 解构的校验</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="VSCode-添加-Prettier-插件"><a href="#VSCode-添加-Prettier-插件" class="headerlink" title="VSCode 添加 Prettier 插件"></a>VSCode 添加 Prettier 插件</h3><p>VSCode 默认安装了该插件，如果没有则可以自己安装</p><img src="1704951148666.png"><h2 id="配置-Stylelint"><a href="#配置-Stylelint" class="headerlink" title="配置 Stylelint"></a>配置 Stylelint</h2><blockquote><p>Stylelint，一个强大的 CSS Lint工具，可以帮助你避免语法错误和同意代码风格。</p></blockquote><h3 id="初始化-Stylelint，在根目录下生成-stylelintrc-json文件"><a href="#初始化-Stylelint，在根目录下生成-stylelintrc-json文件" class="headerlink" title="初始化 Stylelint，在根目录下生成 .stylelintrc.json文件"></a>初始化 Stylelint，在根目录下生成 <code>.stylelintrc.json</code>文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm create stylelint</span><br></pre></td></tr></table></figure><h3 id="添加-Stylelint-格式化规则，根据实际需要添加其他规则"><a href="#添加-Stylelint-格式化规则，根据实际需要添加其他规则" class="headerlink" title="添加 Stylelint 格式化规则，根据实际需要添加其他规则"></a>添加 Stylelint 格式化规则，根据实际需要添加其他规则</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i stylelint stylelint-config-standard stylelint-config-standard-scss -D</span><br></pre></td></tr></table></figure><h3 id="修改项目根目录下的-stylelintrc-json"><a href="#修改项目根目录下的-stylelintrc-json" class="headerlink" title="修改项目根目录下的 .stylelintrc.json"></a>修改项目根目录下的 <code>.stylelintrc.json</code></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;stylelint-config-standard&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;stylelint-config-standard-scss&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="VSCode-安装-Stylelint-插件"><a href="#VSCode-安装-Stylelint-插件" class="headerlink" title="VSCode 安装 Stylelint 插件"></a>VSCode 安装 Stylelint 插件</h3><img src="1704951192641.png"><h3 id="配置-Stylelint-1"><a href="#配置-Stylelint-1" class="headerlink" title="配置 Stylelint"></a>配置 Stylelint</h3><p>可以根据实际需要在 VSCode 全局配置文件 <code>settings.json</code> 或 为单独项目进行配置，我这里是为单独项目进行配置，修改项目根目录下的文件（如果不存在则自行添加）：<code>./.vscode/settings.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;css.validate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;less.validate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scss.validate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;stylelint.validate&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;css&quot;</span><span class="punctuation">,</span> <span class="string">&quot;scss&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>说明：前三行是关闭 vscode 的默认校验，最后一行是开启 styelint 校验 <code>css</code>和 <code>scss</code> 样式文件，这些配置在 Stylelint 插件说明里就有，其他配置可以参考插件说明</p><h2 id="配置-huskey"><a href="#配置-huskey" class="headerlink" title="配置 huskey"></a>配置 huskey</h2><blockquote><p>husky 是一个 git hooks 工具  ( git的钩子工具，可以在特定时机执行特定的命令 )</p><p>使用介绍：<a href="https://typicode.github.io/husky/">🐶 husky | 🐶 husky (typicode.github.io)</a></p></blockquote><h3 id="初始化-git"><a href="#初始化-git" class="headerlink" title="初始化 git"></a>初始化 git</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="初始化-huskey"><a href="#初始化-huskey" class="headerlink" title="初始化 huskey"></a>初始化 huskey</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm dlx husky-init &amp;&amp; pnpm install</span><br></pre></td></tr></table></figure><h3 id="修改-huskey-pre-commit-文件"><a href="#修改-huskey-pre-commit-文件" class="headerlink" title="修改 .huskey&#x2F;pre-commit 文件"></a>修改 .huskey&#x2F;pre-commit 文件</h3><blockquote><p>默认会执行<strong>全量</strong>检查，所以需要配合后面的 <code>lint-staged</code> 使用</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm lint</span><br></pre></td></tr></table></figure><h3 id="配置-lint-staged"><a href="#配置-lint-staged" class="headerlink" title="配置 lint-staged"></a>配置 lint-staged</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i lint-staged -D</span><br></pre></td></tr></table></figure><h3 id="配置-package-json"><a href="#配置-package-json" class="headerlink" title="配置 package.json"></a>配置 package.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// ... 省略 ...</span></span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;*.&#123;js,ts,vue&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;eslint --fix&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;*.&#123;css,scss&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;stylelint --fix&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// ... 省略 ...</span></span><br><span class="line">    <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="修改-huskey-pre-commit-文件-1"><a href="#修改-huskey-pre-commit-文件-1" class="headerlink" title="修改 .huskey&#x2F;pre-commit 文件"></a>修改 .huskey&#x2F;pre-commit 文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm lint-staged</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;uni-app&lt;/code&gt;是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序等多个平台。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="uni-app" scheme="http://example.com/tags/uni-app/"/>
    
    <category term="vite" scheme="http://example.com/tags/vite/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 开发之 VS Code 环境配置篇</title>
    <link href="http://example.com/2024/01/02/flutter-vscode-on-win/"/>
    <id>http://example.com/2024/01/02/flutter-vscode-on-win/</id>
    <published>2024-01-02T15:26:30.000Z</published>
    <updated>2024-07-10T07:34:54.955Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Flutter 为软件开发行业带来了革新：只要一套代码库，即可构建、测试和发布适用于移动、Web、桌面和嵌入式平台的精美应用。</p></blockquote><span id="more"></span><h2 id="Flutter-SDK-安装"><a href="#Flutter-SDK-安装" class="headerlink" title="Flutter SDK 安装"></a>Flutter SDK 安装</h2><h3 id="下载-Flutter-SDK"><a href="#下载-Flutter-SDK" class="headerlink" title="下载 Flutter SDK"></a>下载 Flutter SDK</h3><p>在官网选择对应的电脑系统平台（我这里是 Windows），下载最新的 <a href="https://flutter.cn/docs/get-started/install">flutter sdk</a></p><img src="20240111140921.png"><img src="20240111140718.png"><h3 id="解压-Flutter-SDK"><a href="#解压-Flutter-SDK" class="headerlink" title="解压 Flutter SDK"></a>解压 Flutter SDK</h3><p>解压缩下载的文件，把其中的 flutter-sdk 目录整个放在你想放置 Flutter SDK 的路径中（如：D:\dev 目录下）</p><img src="20240111140541.png"><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>打开搜索框（默认快捷键：<code>Win+S</code>），输入：env，打开“编辑系统环境变量”，选择“高级”，然后打开“环境变量(N)…”</p><img src="20240111141325.png"><p>然后在“用户变量”处，新增三项</p><img src="20240111141453.png"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FLUTTER_GIT_URL=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/flutter-sdk.git&quot;</span><br><span class="line">PUB_HOSTED_URL=&quot;https://pub.flutter-io.cn&quot;</span><br><span class="line">FLUTTER_STORAGE_BASE_URL=&quot;https://storage.flutter-io.cn&quot;</span><br></pre></td></tr></table></figure><p>选中“Path”变量，然后点击“编辑”，在新面板中添加解压后的 flutter sdk 的命令目录路径（我这里是 D:\dev\flutter-sdk\bin）</p><img src="20240111141546.png"><img src="20240111141657.png"><p>打开 cmd 窗口，键入 flutter doctor，执行检查，查看确实的配置项。</p><h2 id="安装并配置-Java-环境"><a href="#安装并配置-Java-环境" class="headerlink" title="安装并配置 Java 环境"></a>安装并配置 Java 环境</h2><h3 id="下载-JDK-17"><a href="#下载-JDK-17" class="headerlink" title="下载 JDK 17"></a>下载 JDK 17</h3><p>打开官网，切换到对应的操作系统平台，下载 <a href="https://www.oracle.com/java/technologies/downloads/#java17">JDK 17</a></p><img src="20240111141809.png"><h3 id="配置环境变量-1"><a href="#配置环境变量-1" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>将下载好的文件安装到默认位置，然后打开 “编辑系统环境变量”面板，选择“高级”选项，进入“环境变量”编辑面板，在“系统变量”栏新增一项 JAVA_HOME，对应的值是jdk的安装目录，如下所示：</p><img src="20240111141957.png"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=&quot;C:\Program Files\Java\jdk-17&quot;</span><br></pre></td></tr></table></figure><p>然后双击打开“Path”变量编辑面板，新增两项：</p><img src="20240111142045.png"><img src="20240111142145.png"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">%</span><span class="language-bash">JAVA_HOME%\bin</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">JAVA_HOME%\jre\bin</span></span><br></pre></td></tr></table></figure><h2 id="安装并配置-Android-SDK-环境"><a href="#安装并配置-Android-SDK-环境" class="headerlink" title="安装并配置 Android SDK 环境"></a>安装并配置 Android SDK 环境</h2><h3 id="下载-Android-SDK"><a href="#下载-Android-SDK" class="headerlink" title="下载 Android SDK"></a>下载 Android SDK</h3><p>打开官网链接，下载对应平台的 <a href="https://developer.android.google.cn/studio?hl=zh-cn">Android SDK</a></p><blockquote><p>注1：建议切换到英文环境，可以确保下载的是最新版本<br>注2：这里仅下载命令行工具，若下载 Android Studio，则不需要要看后面的操作</p></blockquote><img src="20240111142236.png"><h3 id="解压Android-SDK"><a href="#解压Android-SDK" class="headerlink" title="解压Android SDK"></a>解压Android SDK</h3><p>解压缩下载的文件，然后把其中的 android-sdk 目录整个放在你想放置 Android SDK 的路径中（如：D:\dev 目录下）</p><img src="20240111142339.png"><h3 id="更新-Android-SDK-命令行工具"><a href="#更新-Android-SDK-命令行工具" class="headerlink" title="更新 Android SDK 命令行工具"></a>更新 Android SDK 命令行工具</h3><p>进入 <code>android-sdk\cmdline-tools\</code> 目录，然后新建一个 <code>/latest</code>文件夹，并将其余文件和文件夹都移到 <code>/latest</code>文件夹下。</p><p>然后打开 cmd 命令行窗口，执行（执行完毕后请勿关闭，后续还需用到）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到 android-sdk 的命令目录下</span></span><br><span class="line"><span class="comment"># D:\ 这一句是 Windows 切换盘符所需</span></span><br><span class="line"><span class="built_in">cd</span> D:\dev\android<span class="literal">-sdk</span>\cmdline<span class="literal">-tools</span>\latest\bin</span><br><span class="line">D:\</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 android-sdk 命令行工具到最新</span></span><br><span class="line"><span class="comment"># 执行这一步时，如果没有前面的新建 latest 目录，并将其余文件移到该目录下</span></span><br><span class="line"><span class="comment"># 则会提示缺少 latest 目录</span></span><br><span class="line">sdkmanager <span class="literal">--install</span> <span class="string">&quot;cmdline-tools;latest&quot;</span></span><br></pre></td></tr></table></figure><h3 id="安装-SDK-基本组件"><a href="#安装-SDK-基本组件" class="headerlink" title="安装 SDK 基本组件"></a>安装 SDK 基本组件</h3><p>需要的基本组件如下所示（选择目前最新的 <code>android-34</code>版本）：</p><ul><li>platform-tools</li><li>android-34</li><li>build-tools-34.0.0</li></ul><p>打开官网链接：<a href="https://developer.android.google.cn/studio/releases/platform-tools?hl=zh-cn">platforms-tools</a>、<a href="https://developer.android.google.cn/studio/releases/build-tools?hl=zh-cn">build-tools</a>，查看对应的版本（这里建议安装最新版本），返回上一步的 cmd 命令窗口，执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装platforms-tools</span></span><br><span class="line">sdkmanager platform<span class="literal">-tools</span> <span class="string">&quot;platforms;android-34&quot;</span> <span class="string">&quot;build-tools;34.0.0&quot;</span></span><br></pre></td></tr></table></figure><h3 id="配置环境变量-2"><a href="#配置环境变量-2" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>等待安装完成后，再次打开“编辑变量”编辑面板，在“系统变量”一栏新增一项 ANDROID_HOME ：</p><img src="20240111142612.png"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">值是对应的 android-sdk 目录路径</span></span><br><span class="line">ANDROID_HOME=&quot;D:\dev\android-sdk&quot;</span><br></pre></td></tr></table></figure><p>然后双击打开“Path”变量，新建一项：</p><img src="20240111142045.png"><img src="20240111142448.png"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">%</span><span class="language-bash">ANDROID_HOME%\cmdline-tools\latest\bin</span></span><br></pre></td></tr></table></figure><p>打开 cmd 命令窗口，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">协议确认，看到提示时输入 y，回车就可以了</span></span><br><span class="line">flutter doctor --android-licenses</span><br></pre></td></tr></table></figure><h2 id="安装第三方模拟器"><a href="#安装第三方模拟器" class="headerlink" title="安装第三方模拟器"></a>安装第三方模拟器</h2><h3 id="下载和安装逍遥模拟器"><a href="#下载和安装逍遥模拟器" class="headerlink" title="下载和安装逍遥模拟器"></a>下载和安装逍遥模拟器</h3><p>打开官网链接，下载并安装<a href="http://www.xyaz.cn/">逍遥模拟器</a></p><p>运行“逍遥多开器”，然后新建一个安卓9.0模拟器（默认的7.1模拟器版本过低）)</p><h3 id="替换逍遥模拟器的-adb-exe-文件"><a href="#替换逍遥模拟器的-adb-exe-文件" class="headerlink" title="替换逍遥模拟器的 adb.exe 文件"></a>替换逍遥模拟器的 <code>adb.exe</code> 文件</h3><blockquote><p>替换 <code>adb.exe</code> 文件是为了确保使用相同版本的安卓调试桥</p></blockquote><p>复制 android-sdk 下（我的是 D:\dev\android-sdk\platform-tools）的 adb.exe 文件，到“逍遥模拟器”的安装目录下（我的是 D:\Promram Files\Microvirt\MEmu），替换掉“逍遥模拟器”自带 adb.exe 文件</p><h3 id="连接逍遥模拟器"><a href="#连接逍遥模拟器" class="headerlink" title="连接逍遥模拟器"></a>连接逍遥模拟器</h3><p>新建一个bat批处理文件（如：connect_xy.bat），输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="built_in">kill</span><span class="literal">-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若只有一个模拟器，则默认端口号是21503，这里新增了一个安卓9.0模拟器，所以端口号是20513</span></span><br><span class="line">adb connect <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">21513</span></span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>启动逍遥模拟器后，双击上面创建的bat批处理文件，若看到如下结果，则表明已成功连接“逍遥模拟器”</p><img src="20240111143314.png"><p>VS Code 也能看到已连接成功：</p><img src="20240111143614.png" style="width: 70%"><img src="20240111143531.png"><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="执行-flutter-doctor-检查"><a href="#执行-flutter-doctor-检查" class="headerlink" title="执行 flutter doctor 检查"></a>执行 <code>flutter doctor</code> 检查</h3><p>完成以上操作后，新开一个 cmd 命令行窗口，然后 执行 flutter doctor 检查，此时可以看到 Android toolchain 一项前面的绿钩和 Connect device（4 available），默认只有浏览器设备和桌面设备（如Chrome、Edge 和 Windows）：</p><ul><li>未启动并连接逍遥模拟器</li></ul><img src="20240111144024.png"><ul><li>启动并连接逍遥模拟器</li></ul><img src="20240111143848.png"><p>在 VS Code 中运行项目，等待安装前面 android-sdk 协议所确认的项目，安装完成就会连接到“逍遥模拟器”运行App。</p><blockquote><p>如果安装完成后长时间不能连接到“逍遥模拟器”，可以停止并重新运行项目。首次运行需要花一点时间，后面再次运行就快了。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Flutter 为软件开发行业带来了革新：只要一套代码库，即可构建、测试和发布适用于移动、Web、桌面和嵌入式平台的精美应用。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="flutter" scheme="http://example.com/tags/flutter/"/>
    
  </entry>
  
</feed>
